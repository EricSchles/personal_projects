from datastore.models import Data

test = Data.query.limit(1000).all()
training = Data.query.limit(3000).all()

def product(listing):
    return reduce(lambda x,y:x*y,listing)

def objective_function(params,constants,operator="+"):
    if operator == "+": return sum([params[ind]*val for ind,val in enumerate(constants)])
    if operator == "*": return product([params[ind]**val for ind,val in enumerate(constants)])

def score_function(anticipated_result,actual_result):
    return abs(anticipated_result-actual_result) #lower score is better (means the result is closer to what you actually got)

def rebalance(prior_information):
    """
    prior_information: [[score function result, constant1, constant2],...]
    """
    for info in prior_information:
        weight = 1/float(info[0])
        constant1 = info[1]
        constant2 = info[2]
        
    
def hill_climb():
    constants = [1,0]
    prev_score = 100000
    episolon = 0.005
    for elem in xrange(training):
        params = [elem.param1,elem.param2]
        result = objective_function(params,constants)
        score = score_function(result,elem.result)
        if abs(score - prev_score) < episolon:
            if prev_score < score:
                constants = [constant[0]-1/float(score*score),constant[1]+1/float(score*score)]
            if prev_score > score:
                constants = [constant[0]+1/float(score*score),constant[1]-1/float(score*score)]
        else:
            if prev_score < score:
                constants = [constant[0]-1/(score * 0.5),constant[1]+1/(score * 0.5)]
            if prev_score > score:
                constants = [constant[0]+1/(0.5 * score),constant[1]-1/(0.5 * score)]
        prev_score = score
        print "score",score

if __name__ == '__main__':
    hill_climb()
